//@version=4
strategy(title="ATR + EMA + SMA Strategy", default_qty_value = 50, overlay = true, initial_capital=50000, default_qty_type = strategy.cash, commission_type =  strategy.commission.percent, commission_value = 0.05, calc_on_every_tick=true)


//Time window for strategy

// === INPUT BACKTEST RANGE ===
fromDay   = input(defval = 1,    title = "From Day",        type = input.integer, minval = 1, maxval = 31)
fromMonth = input(defval = 1,    title = "From Month",      type = input.integer, minval = 1, maxval = 12)
fromYear  = input(defval = 2020, title = "From Year",       type = input.integer, minval = 1970)
thruDay   = input(defval = 30,    title = "Thru Day",        type = input.integer, minval = 1, maxval = 31)
thruMonth = input(defval = 9,    title = "Thru Month",      type = input.integer, minval = 1, maxval = 12)
thruYear  = input(defval = 2020, title = "Thru Year",       type = input.integer, minval = 1970)

// === FUNCTION EXAMPLE ===
start     = timestamp(fromYear, fromMonth, fromDay, 00, 00)        // backtest start window
finish    = timestamp(thruYear, thruMonth, thruDay, 23, 59)        // backtest finish window
window()  => time >= start and time <= finish ? true : false       // create function "within window of time"

//Exit at the end of day everyday

intraday_sess = "0915-1500"
t = time(timeframe.period, intraday_sess)
sess_over = not na(t[1]) and na(t)
strategy.close_all(when = sess_over)

Source = input(title="Source", type=input.source, defval=close)
priceList = security(syminfo.tickerid, timeframe.period, Source)
smaLength = input(title="sma Length", type=input.integer, defval=13, minval=2)
TriggerPrice = input(title="Trigger Price", type=input.source, defval=close)
PlaySafe = input(title="Play safe", type=input.bool, defval=false)

atrSensitivity = input(7,     title = "Key Vaule. 'This changes the sensitivity'")
atrPeriod = input(14,    title = "ATR Period")

xATR  = atr(atrPeriod)

nLoss = atrSensitivity * xATR

xATRTrailingStop = 0.0

// isLastTwoPricesGreaterThanStop() => priceList > nz(xATRTrailingStop[1], 0) and priceList[1] > nz(xATRTrailingStop[1], 0)
// isLastTwoPricesSmallerThanStop() => priceList < nz(xATRTrailingStop[1], 0) and priceList[1] < nz(xATRTrailingStop[1], 0)
// isPriceGreaterThanStop() => priceList > nz(xATRTrailingStop[1], 0)

xATRTrailingStop := iff(priceList > nz(xATRTrailingStop[1], 0) and priceList[1] > nz(xATRTrailingStop[1], 0), max(nz(xATRTrailingStop[1]), priceList - nLoss),
   iff(priceList < nz(xATRTrailingStop[1], 0) and priceList[1] < nz(xATRTrailingStop[1], 0), min(nz(xATRTrailingStop[1]), priceList + nLoss), 
   iff(priceList > nz(xATRTrailingStop[1], 0), priceList - nLoss, priceList + nLoss)))
   
pos = 0
xSMA = ema(priceList, smaLength)
above = crossover(xSMA, xATRTrailingStop)
below = crossover(xATRTrailingStop, xSMA)

pos := iff(TriggerPrice > xSMA, 1,
         iff(TriggerPrice < xSMA, -1, nz(pos[1], 0)))
possig =iff(pos[1] != pos, pos, 0)

quanitity = input(50, "Quanitity input")

buy() => PlaySafe ? possig == 1  and priceList > xATRTrailingStop and above : (possig == 1)  or (priceList > xATRTrailingStop and above)

sell() =>  PlaySafe ? possig == -1 and priceList < xATRTrailingStop and below : (possig == -1) or (priceList < xATRTrailingStop and below)

if (buy() and window())
    strategy.entry("Long", strategy.long, quanitity)
if (sell() and window())
    strategy.entry("Short", strategy.short, quanitity)

plot(xSMA, title='SMA', color=#00ffaa, linewidth=2, style=plot.style_line)