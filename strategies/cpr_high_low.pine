// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© parabveer01
//@version=4

strategy(title = "cpr_high_low_test", shorttitle = "Dates", overlay = true, precision = 8, max_bars_back = 200, pyramiding = 0, initial_capital = 50000,
     currency = currency.NONE, default_qty_type = strategy.cash, default_qty_value = 200, commission_type = "percent", commission_value = 0.05, overlay=true)

// === INPUT MA LENGTHS ===
fastMA    = input(defval = 14,   title = "FastMA",          type = input.integer, minval = 1, step = 1)
slowMA    = input(defval = 28,   title = "SlowMA",          type = input.integer, minval = 1, step = 1)

// === INPUT BACKTEST RANGE ===
fromMonth = input(defval = 8,    title = "From Month",      type = input.integer, minval = 1, maxval = 12)
fromDay   = input(defval = 21,    title = "From Day",        type = input.integer, minval = 1, maxval = 31)
fromYear  = input(defval = 2020, title = "From Year",       type = input.integer, minval = 1970)
thruMonth = input(defval = 8,    title = "Thru Month",      type = input.integer, minval = 1, maxval = 12)
thruDay   = input(defval = 26,    title = "Thru Day",        type = input.integer, minval = 1, maxval = 31)
thruYear  = input(defval = 2020, title = "Thru Year",       type = input.integer, minval = 1970)

// === INPUT SHOW PLOT ===
showDate  = input(defval = true, title = "Show Date Range", type = input.bool)

// === FUNCTION EXAMPLE ===
start     = timestamp(fromYear, fromMonth, fromDay, 00, 00)        // backtest start window
finish    = timestamp(thruYear, thruMonth, thruDay, 23, 59)        // backtest finish window
window()  => time >= start and time <= finish ? true : false       // create function "within window of time"

// === LOGIC ===
crossOv   = crossover (sma(close, fastMA), sma(close, slowMA))     // true when fastMA crosses over slowMA
crossUn   = crossunder(sma(close, fastMA), sma(close, slowMA))     // true when fastMA crosses under slowMA

// high, low band
lower = low
upper = high
l = plot(lower, color=color.silver)
u = plot(upper, color=color.silver)
fill(u, l, color=color.silver)

// pivot
pivot = (high + low + close ) / 3.0

// bar color
TrendingUp() => close > close[1] and hl2 > hl2[1] and close > pivot
TrendingDown() => close < close[1] and hl2 < hl2[1] and close < pivot
barcolor(TrendingUp() ? color.green : TrendingDown() ? color.red : color.blue)

// background color
bgcolor(TrendingUp() and TrendingDown()[1] ? color.green : TrendingDown() and TrendingUp()[1] ? color.red : na)

// buy, sell signals
bearish = cross(close,pivot) == 1 and close[1] > close
bullish = cross(close,pivot) == 1 and close[1] < close
plotshape(bearish, color=color.maroon, style=shape.arrowdown, text="Sell", location=location.abovebar)
plotshape(bullish, color=color.olive, style=shape.arrowup, text="Buy", location=location.belowbar)

// strong buy, strong sell signals
verybearish = cross(close,pivot) == 1 and close[1] > close and TrendingDown()
verybullish = cross(close,pivot) == 1 and close[1] < close and TrendingUp()
//plotshape(verybearish, color=color.fuchsia, style=shape.arrowdown, text="Sell", location=location.abovebar)
//plotshape(verybullish, color=color.lime, style=shape.arrowup, text="Buy", location=location.belowbar)

// === EXECUTION ===
//strategy.entry("L", strategy.long,200, when = window() and verybullish)
//strategy.close("L", when = window() and verybearish)

buyCall = TrendingUp() and TrendingDown()[1]
sellCall = TrendingDown() and TrendingUp()[1]
bullishReversal = close < close[1] and close < close[2]
bearishReversal = close > close[1] and close > close[2]

plotshape(buyCall, color=color.lime, style=shape.arrowup, text="BuyCall", location=location.belowbar)
plotshape(sellCall, color=color.fuchsia, style=shape.arrowdown, text="SellCall", location=location.abovebar)

strategy.entry("buy", strategy.long, 200, when= window() and buyCall)
strategy.close("buy", when= window() and sellCall or bullishReversal)
strategy.exit("Stop Loss/TP","buy", loss=100)
strategy.entry("sell", strategy.short, 200, when=window() and sellCall)
strategy.close("sell", when= window() and buyCall or bearishReversal)
strategy.exit("Stop Loss/TP","sell", loss=100)

