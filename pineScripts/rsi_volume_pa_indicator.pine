// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© parabveer

//@version=5
// rsi_volume_pa
strategy("rsi_volume_pa", overlay = true, default_qty_value = 50)

// input for trailling SL
trailPerc = input.float(title="Trail Long Loss (%)", minval=0.0, step=0.1, defval=0.15) * 0.01
exitAtTarget = input.bool(title = "Exit when one opposite candle shown", defval = false)
useStochasticRSI = input.bool(title = "Use stochastic RSI", defval = false)
useSuperTrend = input.bool(title = "Use super trend", defval = false)


//Time window for strategy

// === INPUT BACKTEST RANGE ===
fromDay   = input.int(defval = 1,    title = "From Day",    minval = 1, maxval = 31)
fromMonth = input.int(defval = 12,    title = "From Month",  minval = 1, maxval = 12)
fromYear  = input.int(defval = 2022, title = "From Year",   minval = 1970)
thruDay   = input.int(defval = 30,    title = "Thru Day",    minval = 1, maxval = 31)
thruMonth = input.int(defval = 12,    title = "Thru Month",  minval = 1, maxval = 12)
thruYear  = input.int(defval = 2022, title = "Thru Year",   minval = 1970)

// === FUNCTION EXAMPLE ===
start     = timestamp(fromYear, fromMonth, fromDay, 00, 00)        // backtest start window
finish    = timestamp(thruYear, thruMonth, thruDay, 23, 59)        // backtest finish window
window()  => time >= start and time <= finish ? true : false       // create function "within window of time"

//Exit at the end of day everyday

intraday_sess = "0915-1500"
t = time(timeframe.period, intraday_sess)
sess_over = not na(t[1]) and na(t)
if sess_over 
    strategy.close_all()

// Define a variable to store the previous bar's volume
prevVolume = volume
prevClose = close
prevOpen = open

prevCandleRed = prevClose < prevOpen
prevCandleGreen = prevClose > prevOpen

// Define a variable to store the previous to previous bar's volume
prev2prevVolume = volume[1]
prev2prevClose = close[1]
prev2prevOpen = open[1]

prev2prevCandleRed = prev2prevClose < prev2prevOpen
prev2prevCandleGreen = prev2prevClose > prev2prevOpen

// bullish_signal = volume > prevVolume and prevCandleRed and isGreenVolume
bullish_signal = (prevVolume >= prev2prevVolume) and (prevCandleGreen and prev2prevCandleRed)
bearish_signal = (prevVolume >= prev2prevVolume) and (prevCandleRed and prev2prevCandleGreen)

// Check if the current volume is greater than the previous volume
// if (bullish_signal)
//     // Volume is increasing, bullish signal
//     label.new(bar_index, low - 30, "", color=color.green, style=label.style_arrowup)
// else if (bearish_signal)
//     // Volume is decreasing, bearish signal
//     label.new(bar_index, low, "Bearish", color=color.red)

// Determine trail stop loss prices
longStopPrice = 0.0

longStopPrice := if (strategy.position_size > 0)
    stopValue = close * (1 - trailPerc)
    math.max(stopValue, longStopPrice[1])
else
    0

// Determine trailing short price
shortStopPrice = 0.0

shortStopPrice := if (strategy.position_size < 0)
    stopValue = close * (1 + trailPerc)
    math.min(stopValue, shortStopPrice[1])
else
    999999

// Plot stop loss values for confirmation
plot(series=(strategy.position_size > 0) ? longStopPrice : na, color=color.rgb(252, 49, 26), style=plot.style_cross, linewidth=2, title="Long Trail Stop")
plot(series=(strategy.position_size < 0) ? shortStopPrice : na, color=color.rgb(47, 249, 11), style=plot.style_cross,linewidth=2, title="Short Trail Stop")


// StochasticRSI 
rsi1 = ta.rsi(close, 14)
k = ta.sma(ta.stoch(rsi1, rsi1, rsi1, 14), 3)
smallRSI = k < 30
largeRSI = k > 70

// Super trend
atrPeriod = input(10, "ATR Length")
factor = input.float(2.0, "Factor", step = 0.01)

[supertrend, direction] = ta.supertrend(factor, atrPeriod)

bodyMiddle = plot((open + close) / 2, display=display.none)
upTrend = direction == -1
downTrend = direction == 1

plot(direction, title = "direction")

// Submit entry orders
if (window()) 
    if useStochasticRSI
        if (bullish_signal and strategy.position_size == 0 and smallRSI)
            strategy.entry(id="EL", direction = strategy.long)
    else if useSuperTrend
        if (bullish_signal and strategy.position_size == 0 and upTrend)
            strategy.entry(id="EL", direction = strategy.long)
    else
        if (bullish_signal and strategy.position_size == 0)
            strategy.entry(id="EL", direction = strategy.long)

    if useStochasticRSI
        if (bearish_signal and strategy.position_size == 0 and largeRSI)
            strategy.entry(id="ES", direction = strategy.short)
    else if useSuperTrend
        if (bearish_signal and strategy.position_size == 0 and downTrend)
            strategy.entry(id="ES", direction = strategy.short)
    else
        if (bearish_signal and strategy.position_size == 0)
            strategy.entry(id="ES", direction = strategy.short)


if (exitAtTarget)
    if (prevCandleRed)
        strategy.close(id="EL", comment = "Target meet for long")

    if (prevCandleGreen)
        strategy.close(id="ES", comment = "Target meet for short")

// Submit exit orders for trail stop loss price
if (strategy.position_size > 0)
    strategy.exit(id="XL TRL STP", stop=longStopPrice)

if (strategy.position_size < 0)
    strategy.exit(id="XS TRL STP", stop=shortStopPrice)

